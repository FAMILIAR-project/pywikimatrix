,Unnamed: 0,unary,binary,function call
0,ABAP Objects,,,
1,C++ (STL),type operator symbol () { instructions },type operator symbol (type operand2) { instructions },type operator () («parameters») { instructions }
2,C#,static type operator symbol(type operand) { instructions },"static type operator symbol(type operand1, type operand2) { instructions }",
3,D,"type opUnary(string s)() if (s == ""symbol"") { instructions }","type opBinary(string s)(type operand2) if (s == ""symbol"") { instructions } type opBinaryRight(string s)(type operand1) if (s == ""symbol"") switch (s) { instructions }",type opCall(«parameters») { instructions }
4,Java,,,
5,Objective-C,,,
6,Swift,func symbol(operand1 : type) -> returntype { instructions } (outside class),"func symbol(operand1 : type1, operand2 : type2) -> returntype { instructions } (outside class)",
7,Eiffel[35],"op_name alias ""symbol"": TYPE do instructions end","op_name alias ""symbol"" (operand: TYPE1): TYPE2 do instructions end",
8,Python,def __opname__(self): Tab ↹ instructions Tab ↹ return value,"def __opname__(self, operand2): Tab ↹ instructions Tab ↹ return value","def __call__(self«, paramters»): Tab ↹ instructions Tab ↹ return value"
9,Visual Basic .NET,Shared Operator symbol(operand As type) As type instructions End Operator,"Shared Operator symbol(operand1 As type, operand2 As type) As type instructions End Operator",
10,Xojo,Function Operator_name(operand As type) As type instructions End Function,,
11,PHP,[36],[36],function __invoke(«parameters») { instructions } (PHP 5.3+)
12,Perl,"use overload ""symbol"" => sub { my ($self) = @_; instructions };","use overload ""symbol"" => sub { my ($self, $operand2, $operands_reversed) = @_; instructions };",
13,Raku,«our «type »»«multi »method prefix:<symbol> («$operand: ») { instructions ... return value; } or «our «type »»«multi »method postfix:<symbol> («$operand: ») { instructions ... return value; } or «our «type »»«multi »method circumfix:<symbol1 symbol2> («$operand: ») { instructions ... return value; },«our «type »»«multi »method infix:<symbol> («$operand1: » type operand2) { instructions ... return value; },«our «type »»«multi »method postcircumfix:<( )> («$self: » «parameters») { instructions }
14,Ruby,def symbol instructions expression resulting in return value end,def symbol(operand2) instructions expression resulting in return value end,
15,Windows PowerShell,,,
16,OCaml,,,
17,F#,static member (symbol) operand = expression,"static member (symbol) (operand1, operand2) = expression",
18,COBOL,,,
19,ISLISP,,,
