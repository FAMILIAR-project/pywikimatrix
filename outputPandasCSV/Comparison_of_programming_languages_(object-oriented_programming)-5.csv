,Unnamed: 0,basic/void method,value-returning method,Unnamed: 3
0,ABAP Objects,methods name «importing parameter = argument» «exporting parameter = argument» «changing parameter = argument» «returning value(parameter)»method name. instructions endmethod.[28],[29],
1,"C++[30] type foo(«parameters»); The implementation of methods is usually provided in a separate source file, with the following syntax type class::foo(«parameters») { instructions }[31]",void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },
2,C#,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },
3,D,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },
4,Java,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },
5,eC,void ««type of 'this'»::»foo(«parameters») { instructions },type ««type of this»::»foo(«parameters») { instructions ... return value; },
6,Eiffel,foo ( «parameters» ) do instructions end,foo ( «parameters» ): TYPE do instructions... Result := value end,
7,Objective-C,- (void)foo«:parameter «bar:parameter ...»» { instructions },- (type)foo«:parameter «bar:parameter ...»» { instructions... return value; },
8,Swift,func foo(«parameters») { instructions },func foo(«parameters») -> type { instructions... return value },
9,Python,"def foo(self«, parameters»): Tab ↹ instructions","def foo(self«, parameters»): Tab ↹ instructions Tab ↹ return value",
10,Visual Basic .NET,Sub Foo(«parameters») instructions End Sub,Function Foo(«parameters») As type instructions ... Return value End Function,
11,Xojo,Sub Foo(«parameters») instructions End Sub,Function Foo(«parameters») As type instructions ... Return value End Function,
12,PHP,function foo(«parameters»)«: void» { instructions },function foo(«parameters»)«: type» { instructions ... return value; },
13,Perl,"sub foo { my ($self«, parameters») = @_; instructions }","sub foo { my ($self«, parameters») = @_; instructions ... return value; }",
14,Raku,«has »«multi »method foo(««$self: »parameters») { instructions },«has «type »»«multi »method foo(««$self: »parameters») { instructions ... return value; },
15,Ruby,def foo«(parameters)» instructions end,def foo«(parameters)» instructions expression resulting in return value end or def foo«(parameters)» instructions return value end,
16,Windows PowerShell,Add-Member «-MemberType» ScriptMethod «-Name» foo «-Value» { «param(parameters)» instructions } -InputObject variable,Add-Member «-MemberType» ScriptMethod «-Name» foo «-Value» { «param(parameters)» instructions ... return value } -InputObject variable,
17,OCaml,,method foo «parameters» = expression,
18,F#,,member this.foo(«parameters») = expression,
19,JavaScript,this.method = function(«parameters») {instructions} name«.prototype.method = function(«parameters») {instructions}[32],this.method = function(«parameters») {instructions... return value;} name«.prototype.method = function(«parameters») {instructions... return value;}[32],
20,Javascript (ES6),foo(«parameters») {instructions},foo(«parameters») {instructions... return value;},
21,COBOL,METHOD-ID. foo. «DATA DIVISION. LINKAGE SECTION. parameter declarations» PROCEDURE DIVISION« USING parameters». instructions END METHOD foo.,METHOD-ID. foo. DATA DIVISION. LINKAGE SECTION. «parameter declarations» result-var declaration PROCEDURE DIVISION« USING parameters» RETURNING result-var. instructions END METHOD foo.,
22,Cobra,def foo(parameters)Tab ↹ instructions,def foo(parameters) as typeTab ↹ instructionsTab ↹ return value,
23,ISLISP,(defgeneric method (arg1 arg2)) (defmethod method ((arg1 <class1> arg2 <class2>) ...),,
