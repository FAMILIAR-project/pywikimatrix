,Unnamed: 0,calling a function,basic/void function,value-returning function,required main function
0,Ada[1],foo «(parameters)»,procedure foo «(parameters)» is begin statements end foo,function foo «(parameters)» return type is begin statements end foo,
1,ALGOL 68,foo«(parameters)»;,proc foo = «(parameters)» void: ( instructions );,proc foo = «(parameters)» rettype: ( instructions ...; retvalue );,
2,APL,«parameters» foo parameters,foo←{ statements },foo←{ statements },
3,C (C99),foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },"«global declarations» int main(«int argc, char *argv[]») { instructions }"
4,Objective-C,foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },"«global declarations» int main(«int argc, char *argv[]») { instructions }"
5,C++ (STL),foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },"«global declarations» int main(«int argc, char *argv[]») { instructions }"
6,Java,foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },public static void main(String[] args) { instructions } or public static void main(String... args) { instructions }
7,D,foo(«parameters»),void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; },int main(«char[][] args») { instructions} or int main(«string[] args») { instructions} or void main(«char[][] args») { instructions} or void main(«string[] args») { instructions}
8,C#,foo(«parameters»),"Same as above; alternatively, if only one statement: void foo(«parameters») => statement;","Same as above; alternatively, if simple enough to be an expression: void foo(«parameters») => expression;","static void Main(«string[] args») method_body May instead return int. (starting with C# 7.1:) May return Task or Task<int>, and if so, may be async."
9,JavaScript,foo(«parameters»),"function foo(«parameters») { instructions } or var foo = function («parameters») {instructions } or var foo = new Function («""parameter"", ... ,""last parameter""» ""instructions"");",function foo(«parameters») { instructions ... return value; },
10,Go,foo(«parameters»),func foo(«parameters») { instructions },func foo(«parameters») type { instructions ... return value },func main() { instructions }
11,Swift,foo(«parameters»),func foo(«parameters») { instructions },func foo(«parameters») -> type { instructions ... return value },
12,Common Lisp,(foo «parameters»),(defun foo («parameters»)instructions) or (setf (symbol-function 'symbol)lambda),(defun foo («parameters»)...value),
13,Scheme,(foo «parameters»),(define (foo parameters) instructions) or (define foo (lambda (parameters) instructions)),(define (foo parameters) instructions... return_value) or (define foo (lambda (parameters) instructions... return_value)),
14,ISLISP,(foo «parameters»),(defun foo («parameters»)instructions),(defun foo («parameters»)...value),
15,Pascal,foo«(parameters)»,procedure foo«(parameters)»; «forward;»[a] «labellabel declarations» «constconstant declarations» «typetype declarations» «varvariable declarations» «local function declarations»begininstructionsend;,function foo«(parameters)»: type; «forward;»[a] «labellabel declarations» «constconstant declarations» «typetype declarations» «varvariable declarations» «local function declarations»begin instructions; foo := valueend;,program name; «labellabel declarations» «constconstant declarations» «typetype declarations» «varvariable declarations» «function declarations»begininstructions end.
16,Visual Basic,Foo(«parameters»),Sub Foo«(parameters)» instructions End Sub,Function Foo«(parameters)»« As type»instructions Foo = valueEnd Function,Sub Main()instructionsEnd Sub
17,Visual Basic .NET,Foo(«parameters»),Sub Foo«(parameters)» instructions End Sub,"Same as above; alternatively: Function Foo«(parameters)»« As type»instructionsReturn valueEnd Function The As clause is not required if Option Strict is off. A type character may be used instead of the As clause. If control exits the function without a return value having been explicitly specified, the function returns the default value for the return type.",Sub Main(««ByVal »args() As String») instructions End Subor Function Main(««ByVal »args() As String») As Integer instructionsEnd Function
18,Xojo,Foo(«parameters»),Sub Foo«(parameters)» instructions End Sub,"Same as above; alternatively: Function Foo«(parameters)»« As type»instructionsReturn valueEnd Function The As clause is not required if Option Strict is off. A type character may be used instead of the As clause. If control exits the function without a return value having been explicitly specified, the function returns the default value for the return type.",Sub Main(««ByVal »args() As String») instructions End Subor Function Main(««ByVal »args() As String») As Integer instructionsEnd Function
19,Python,foo(«parameters»),def foo(«parameters»): Tab ↹ instructions,def foo(«parameters»): Tab ↹ instructions Tab ↹ return value,
20,S-Lang,foo(«parameters» «;qualifiers»),define foo («parameters») { instructions },define foo («parameters») { instructions ... return value; },public define slsh_main () { instructions }
21,Fortran,foo («arguments») CALL sub_foo («arguments»)[c],SUBROUTINE sub_foo («arguments») instructions END SUBROUTINE[c],type FUNCTION foo («arguments») instructions ... foo = value END FUNCTION[c],PROGRAM main instructions END PROGRAM
22,Forth,«parameters» FOO,: FOO « stack effect comment: ( before -- ) » instructions ;,: FOO « stack effect comment: ( before -- after ) » instructions ;,
23,PHP,foo(«parameters»),function foo(«parameters») { instructions },function foo(«parameters») { instructions ... return value; },
24,Perl,foo(«parameters») or &foo«(parameters)»,sub foo { «my (parameters) = @_;» instructions },sub foo { «my (parameters) = @_;» instructions... «return» value; },
25,Raku,foo(«parameters») or &foo«(parameters)»,«multi »sub foo(parameters) { instructions },«our «type» »«multi »sub foo(parameters) { instructions... «return» value; },
26,Ruby,foo«(parameters)»,def foo«(parameters)» instructions end,def foo«(parameters)» instructions «return» value end,
27,Rust,foo(«paramaters»),fn foo(«paramaters») { instructions },fn foo(«paramaters») -> type { instructions },fn main() { instructions }
28,Scala,foo«(parameters)»,def foo«(parameters)»«: Unit =» { instructions },def foo«(parameters)»«: type» = { instructions ... «return» value },def main(args: Array[String]) { instructions }
29,Windows PowerShell,foo «parameters»,function foo { instructions };orfunction foo { «param(parameters)» instructions },function foo «(parameters)» { instructions … return value }; orfunction foo { «param(parameters)» instructions … return value },
30,Bash shell,foo «parameters»,function foo {  instructions } or foo () {  instructions  },function foo {  instructions  return «exit_code» } or foo () {  instructions  return «exit_code»  },
31,Bash shell,foo «parameters»,"parameters $n ($1, $2, $3, ...) $@ (all parameters) $# (the number of parameters) $0 (this function name)","parameters $n ($1, $2, $3, ...) $@ (all parameters) $# (the number of parameters) $0 (this function name)",
32,OCaml,foo parameters,let «rec» foo parameters = instructions,let «rec» foo parameters = instructions... return_value,
33,F#,foo parameters,let «rec» foo parameters = instructions,let «rec» foo parameters = instructions... return_value,[<EntryPoint>] let main args = instructions
34,Standard ML,foo parameters,fun foo parameters = ( instructions ),fun foo parameters = ( instructions... return_value ),
35,Haskell,foo parameters,foo parameters = doTab ↹ instructions,foo parameters = return_value or foo parameters = doTab ↹ instructionsTab ↹ return value,«main :: IO ()» main = do instructions
36,Eiffel,foo («parameters»),foo («parameters»)require preconditions do instructions ensure postconditions end,foo («parameters»): typerequire preconditions do instructionsResult := value ensure postconditions end,[b]
37,CoffeeScript,foo(),foo = ->,foo = -> value,
38,CoffeeScript,foo parameters,foo = () ->,foo = ( parameters ) -> value,
39,COBOL,"CALL ""foo"" «USING parameters» «exception-handling» «END-CALL»[d]",«IDENTIFICATION DIVISION.» PROGRAM-ID. foo. «other divisions...» PROCEDURE DIVISION «USING parameters».  instructions.,«IDENTIFICATION DIVISION.» PROGRAM-ID/FUNCTION-ID. foo. «other divisions...» DATA DIVISION. «other sections...» LINKAGE SECTION. «parameter definitions...» variable-to-return definition «other sections...» PROCEDURE DIVISION «USING parameters» RETURNING variable-to-return.  instructions.,
40,COBOL,«FUNCTION» foo«(«parameters»)»,,«IDENTIFICATION DIVISION.» PROGRAM-ID/FUNCTION-ID. foo. «other divisions...» DATA DIVISION. «other sections...» LINKAGE SECTION. «parameter definitions...» variable-to-return definition «other sections...» PROCEDURE DIVISION «USING parameters» RETURNING variable-to-return.  instructions.,
